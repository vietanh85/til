1 + 1
"ABC"
x = 42
x /2
x < 43
x <= 43
x <- 43
clear
clear()
c(1, TRUE)
c(1, "TRUE")
c("TRUE", 1)
c(5:9)
vesselsSunk <- c(4, 5, 1)
delete x
delete(x)
barplot(vesselsSunk)
names(vesselsSunk) <- c("England", "France", "Norway")
barplot(vesselsSunk)
a <- c(1:9)
a + 1
barplot(a)
a/2
a*2
b(1:3)
b = c(1:3)
a + b
a / b
c = c('1', '2')
a + c
d = c('1', '2')
a + d
x <- seq(1, 20, 0.1)
y <- sin(x)
plot(x, y)
values <- -10:10
absolutes <- abs(values)
absolutes
data()
mtcars
plot(mtcars)
install.packages("swirl")
library("swirl")
swirl()
5 + 7
x <- 5 + 7
x
y <- x -3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
c(1,2,3,4) + c(0,10,100)
z * 2 + 100
z * 2 + 100
z * 2 + 1000
my_div
swirl("Data Analysis")
swirl("Data_Analysis")
install_from_swirl("Data Analysis")
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
fir()
?list.files
args(list.files)
old.dir <- getwd()
fir.create("testdir")
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
list.files("mytest.R")
list.exists("mytest.R")
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
args(file.path)
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir")
unlink("testdir", recursive = TRUE)
1:20
pi:20
pi:10
15:1
?:
help(:)
?`?`
?`:`
sqe(1,20)
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length = 30)
my_seq
length(my_seq)
1:length(my_seq)
sqeq(along.with = my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Anh")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y"m "Z"), sep = "")
paste(c(1:3), c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
y
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x <- sample(rnorm(), 20)
swirl()
library("wirl")
library("swirl")
swirl()
swirl()
x
x[1:10]
library("swirl")
swirl()
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x, 2)
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- c([1:20])
my_vector <- c(1:20)
[1:20]
c(1:20)
my_vector <- c(1:20)
my_vector <- 1:20
1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_marix <- my_vector
my_matrix <- my_vector
?matrix()
?matrix
matrix(data = 1:20, nrow = 4, ncol = 5)
my_matrix2 = matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_marix)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
View(my_data)
View(my_marix)
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 . 4)
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(int < 0)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(median, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function (x) {x+1}, 6)
evaluate(function (x) {x[1]}, c(8, 4, 0))
evaluate(function (x) {x[3]}, c(8, 4, 0))
evaluate(function (x) {x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("HELL", "NO")
submit()
mad_libs(place = 'place', adjective = 'adj', noun = 'n')
mpg
submit()
'I' %p 'love' %p 'R!'
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
lapply(flag_colors, mean)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function (elem) elem[2])
setwd("~/_WORKING/predix/ml/udm/1_data_preprocessing")
dataset = read.csv('Data.csv')
View(dataset)
View(dataset)
dataset$Age = ifelse(
is.na(dataset$Age),
ave(dataset$Age, FUN = function (x) mean(x, na.rm = TRUE)),
dataset$Age
)
View(dataset)
View(dataset)
dataset$Salary = ifelse(
is.na(dataset$Salary),
mean(dataset$Salary, na.rm = TRUE),
dataset$Salary
)
View(dataset)
View(dataset)
dataset$Country = factor(
dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)
)
View(dataset)
View(dataset)
dataset$Purchased = factor(
dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1)
)
View(dataset)
View(dataset)
install.packages('caTools')
library("caTools", lib.loc="/usr/local/lib/R/3.3/site-library")
detach("package:caTools", unload=TRUE)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
trainset = subset(dataset, split == TRUE)
testset = subset(dataset, split == FALSE)
View(testset)
View(testset)
View(trainset)
View(trainset)
trainset = scale(trainset)
testset = scale(testset)
View(trainset)
View(trainset)
trainset[, 2:3] = scale(trainset[, 2:3])
testset[, 2:3] = scale(testset[, 2:3])
View(trainset)
View(trainset)
View(testset)
setwd("~/_WORKING/predix/ml/udm/2_simple_linear_regression")
setwd("~/_WORKING/predix/ml/udm/2_simple_linear_regression")
clear
clc
cls
clean
View(dataset)
View(dataset)
View(trainset)
delete
clear
dataset = read.csv('Salary_Data.csv')
View(dataset)
View(dataset)
library(caTools)
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 1/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(training_set)
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(training_set)
View(trainset)
delete testset
View(dataset)
regressor = lm(
formula = Salary ~ YearsExperience,
data = training_set
)
regressor
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
y_pre
y_pred
View(test_set)
install.packages('ggplot2')
library(ggplot2)
library(ggplot2)
ggplot() +
geom_point(
aes(
x=training_set$YearsExperience,
y=training_set$Salary
),
colour='red'
) +
geom_line(
aes(
x=training_set$YearsExperience,
y=predict(regressor, newdata = training_set)
)
)
ggplot() +
geom_point(
aes(
x=training_set$YearsExperience,
y=training_set$Salary
),
colour='red'
) +
geom_line(
aes(
x=training_set$YearsExperience,
y=predict(regressor, newdata = training_set)
),
colour='blue'
)
ggplot() +
geom_point(
aes(
x=training_set$YearsExperience,
y=training_set$Salary
),
colour='red'
) +
geom_line(
aes(
x=training_set$YearsExperience,
y=predict(regressor, newdata = training_set)
),
colour='blue'
) +
ggtitle('Salary vs. Experience (Training Set)') +
xlab('YoE') +
ylab('Salary')
ggplot() +
geom_point(
aes(
x=test_set$YearsExperience,
y=test_set$Salary
),
colour='red'
) +
geom_line(
aes(
x=training_set$YearsExperience,
y=predict(regressor, newdata = training_set)
),
colour='blue'
) +
ggtitle('Salary vs. Experience (Test Set)') +
xlab('YoE') +
ylab('Salary')
ggplot() +
geom_point(
aes(
x=training_set$YearsExperience,
y=training_set$Salary
),
colour='red'
) +
geom_line(
aes(
x=training_set$YearsExperience,
y=predict(regressor, newdata = training_set)
),
colour='blue'
) +
ggtitle('Salary vs. Experience (Training Set)') +
xlab('YoE') +
ylab('Salary')
clear
